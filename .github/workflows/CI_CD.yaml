name: ðŸ§ª CI and ðŸš€ CD

on:
  push:
    branches: [ "main", "qa", "dev" ]
  pull_request:
    branches: [ "main", "qa", "dev" ]
    paths:
      - 'src/**'

jobs:
  unit_test_for_old_java_version:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    strategy:
      matrix:
        distribution: ['zulu', 'temurin', 'microsoft']
        java: ['17', '21']
    name: Unit Test with JDK ${{ matrix.Java }} ${{ matrix.distribution }}
    env:
      DB_USERNAME: root
      DB_PASSWORD: root
      DB_NAME: budgetin
      DB_HOST: localhost
      DB_PORT: 3306
      JPA_SHOW_SQL: true
    steps:
    - uses: actions/checkout@v4.1.1
    - name: Set up JDK ${{ matrix.java }} ${{ matrix.distribution }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ matrix.java }}
        distribution: ${{ matrix.distribution }}
        cache: maven
    - name: Start MySQL
      run: |
        sudo /etc/init.d/mysql start
        mysql -e "CREATE DATABASE IF NOT EXISTS $DB_NAME;" -u$DB_USERNAME -p$DB_PASSWORD
    - name: Build with Maven
      run: mvn clean test

  code_coverage:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    name: Code Coverage Check with JDK 21
    env:
      DB_USERNAME: root
      DB_PASSWORD: root
      DB_NAME: budgetin
      DB_HOST: localhost
      DB_PORT: 3306
      JPA_SHOW_SQL: true
    steps:
    - uses: actions/checkout@v4.1.1
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'microsoft'
        cache: maven
    - name: Start MySQL
      run: |
        sudo /etc/init.d/mysql start
        mysql -e "CREATE DATABASE IF NOT EXISTS $DB_NAME;" -u$DB_USERNAME -p$DB_PASSWORD
    - name: Build with Maven
      run: mvn clean test
    - name: Generate JaCoCo Badge
      uses: cicirello/jacoco-badge-generator@v2
      with:
        generate-branches-badge: true
    - name: Log coverage percentage
      run: |
        echo "coverage = ${{ steps.jacoco.outputs.coverage }}"
        echo "branch coverage = ${{ steps.jacoco.outputs.branches }}"
    - name: Commit the badge (if it changed)
      run: |
        if [[ `git status --porcelain` ]]; then
          git config --global user.name 'KAnggara75'
          git config --global user.email '24321218@users.noreply.github.com'
          git add -A
          git commit -m "Autogenerated JaCoCo coverage badge"
          git push
        fi
    - name: Upload JaCoCo coverage report
      uses: actions/upload-artifact@v4.3.1
      with:
        name: jacoco-report
        path: target/site/jacoco/
        overwrite: true

  versioning:
    needs: code_coverage
    name: Create version number
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Fetch all history for all tags and branches
        run: git fetch --prune --unshallow
      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.11.0
        with:
          versionSpec: "5.10.x"
      - name: Use GitVersion
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0.11.0
      - name: Create version.txt with NuGetVersionV2
        run: echo ${{ steps.gitversion.outputs.NuGetVersionV2  }} > version.txt
      - name: Upload version.txt
        uses: actions/upload-artifact@v4.3.1
        with:
          name: gitversion
          path: version.txt
          overwrite: true

  build_package:
    runs-on: ubuntu-latest
    needs: [unit_test_for_old_java_version, versioning]
    permissions:
      contents: write
      pull-requests: write
    name: Build app with Maven and JDK 21
    steps:
    - uses: actions/checkout@v4.1.1
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'microsoft'
        cache: maven
    - name: Build package with Maven
      run: mvn clean package -Dmaven.test.skip=true
    - name: Upload package artifact
      uses: actions/upload-artifact@v4.3.1
      with:
        name: budgetin
        path: target/budgetin.jar
        overwrite: true

  # TODO: CI CD
  job_2:
    name: 2 Multiply by 9
    needs: versioning
    runs-on: windows-latest
    steps:
      - name: Download math result for job 1
        uses: actions/download-artifact@v4.1.3
        with:
          name: gitversion
      - shell: bash
        run: |
          value=`cat version.txt`
          echo The result is $value

  job_3:
    name: 3 Display results
    needs: [versioning, code_coverage]
    runs-on: macOS-latest
    steps:
      - name: Download math result for job 2
        uses: actions/download-artifact@v4.1.3
        with:
          name: gitversion
      - name: Print the final result
        shell: bash
        run: |
          value=`cat version.txt`
          echo The result is $value

  job_4:
    name: 4 Display final results
    needs: [job_2, code_coverage]
    runs-on: macOS-latest
    steps:
      - name: Download math result for job 2
        uses: actions/download-artifact@v4.1.3
        with:
          name: gitversion
      - name: Print the final result
        shell: bash
        run: |
          value=`cat version.txt`
          echo The result is $value

  job_5:
    name: 5 Display results
    needs: [code_coverage, unit_test_for_old_java_version, build_package]
    runs-on: macOS-latest
    steps:
      - name: Download math result for job 2
        uses: actions/download-artifact@v4.1.3
        with:
          name: gitversion
      - name: Print the final result
        shell: bash
        run: |
          value=`cat version.txt`
          echo The result is $value

  # unit_test_latest_java_version:
  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: Test Restart
  #     uses: appleboy/ssh-action@v1.0.3
  #     with:
  #       host: ${{ secrets.SSH_HOST }}
  #       username: ${{ secrets.SSH_USER }}
  #       key: ${{ secrets.SSH_KEY }}
  #       port: ${{ secrets.SSH_PORT }}
  #       passphrase: ${{ secrets.SSH_PASSPHRASE }}
  #       script_stop: true
  #       script: |
  #         cd ~/work/SpringBoot
  #         git restore .
  #         git pull
  #         ./restart.sh
  #         sudo systemctl restart budgetin

  # unit_test_latest_java_version:
  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: Test Restart
  #     uses: appleboy/ssh-action@v1.0.3
  #     with:
  #       host: ${{ secrets.SSH_HOST }}
  #       username: ${{ secrets.SSH_USER }}
  #       key: ${{ secrets.SSH_KEY }}
  #       port: ${{ secrets.SSH_PORT }}
  #       passphrase: ${{ secrets.SSH_PASSPHRASE }}
  #       script_stop: true
  #       script: |
  #         cd ~/work/SpringBoot
  #         git restore .
  #         git pull
  #         ./restart.sh
  #         sudo systemctl restart budgetin
